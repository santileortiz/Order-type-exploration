Point set auto positioning
==========================

  This is a discussion on the development of an algorithm that positions the
  points in a point set in a way that is more amenable to humans. Several
  attempts have been made, so here I discuss what has worked and what hasn't.
  First of all the goals of the algorithm are to have an output that satisfies
  the following:
  
   - It MUST attempt at all cost to not change the order type of the point set.
     Not even to an equivalent point set with another labeling.
   - The point set should be as symmetric as possible. This mean favoring
     regular polygons if we can.
  
  The current approach is to iteratively compute a 'force' vector for each
  point. At the end of the iteration each point is moved by adding the force
  vector to it's position (maybe delta or distance vector is more
  appropriate?). We finally compute a number called the 'change indicator' that
  tells us if the point set is still changing. The bigger the change indicator
  the grater the impact we had on the original point set in this iteration.
  Using this framework we iterate until the change indicator goes below some
  threshold.
  
  Several ideas have been tested on how to compute the force of each point and
  the change indicator. Here is the progress so far.

Force calculation:
------------------

  IDEA #1:  
  Iterate all binomial(n,2) segments, in each iteration take one of the points,
  compute a vector dv perpendicular to the line containing the segment, and whose
  magnitude represents the distance from the line to the point. Then use this
  distance d = |dv| as input to a cost function and set this as the magnitude of
  dv. The final force of each point is the vector sum of all the influences of
  each segment over it.
  
  Three cost functions were tried out. The idea was to use r as a parameter that
  controls how far from the line the force still has effect. And h controls how
  many pixels a point will be pushed if it's on top of the line. For all tests
  the values of h and r were set to constants. These are the 3 cost functions
  tested:
  
   - cost(d, h, r) = h*(r-d)/r  
       Linear cost. Has value h at distance 0 and value 0 at distance r.  For
       this one to work r must be set to a number larger than any of the force
       vectors may be in the end, otherwise things go crazy because the sign
       changes. This one seems to be the best because it's fast to evaluate, is
       easy to understand, and maybe lends itself to be analytically studied in
       the future.
  
   - cost(d, h, r) = h*exp(-d/r)  
       Exponential cost. Has the nice property that is always positive so we
       don't have to worry about how big force vectors can get. But this is
       also it's downside, due to the exponential growth things may get crazy
       really fast.
  
   - cost(d, h, r) = h*r/(d+r)  
       Hyperbolic cost. Tried out by mistake, but still has a nice behavior.
       Not as slow as the linear, but not as chaotic as the exponential. The
       downside is it's not defined for d=-r and changes sign for d<-r.
  
  Our main goal is to not change the order type, but d is always positive.
  This means that if by any chance a point crosses a line (changing the
  order type), then it will be pushed farther away. To prevent this we flip
  the sign of d so that the point will always be pushed towards it's
  corresponding cell in the original order type. This works for the linear
  and exponential costs, but for hyperbolic cost things go crazy if a
  point goes farther than r in the opposite direction.
  
  As described, this idea has the problem that points in the convex hull
  always have a force pointing outwards. This makes the point set grow
  indefinitely. To stop this from happening we add an imaginary circular
  boundary centered on (128,128) with radius 128. The boundary induces a
  force on each point in the direction of a ray that passes through the
  point and the center (128,128). The magnitude of the force is the cost
  applied to the distance between the point and the boundary along the ray.
  Even though it wasn't tested, one could choose another cost function for
  the boundary and have their parameters be independent from the ones used
  for segments.
  
  In general IDEA #1 has several pros, cons and characteristics whose
  impact is still unknown:
  
  Pros:
   - The order type 0 (convex position) always converges to the regular
     polygon.
  
   - The convex hull almost always converges to a somewhat symmetric polygon
     (but not necessarily regular).
  
  Cons:
   - The order type changes, specially in point sets whose convex hull is a
     triangle, and for points not in the convex hull but close to it. In
     this case all segments except for one in the convex hull are pushing
     it outside and the circular boundary is beyond the convex hull so it
     won't make enough force in time to stop it from going outside the
     convex hull and changing the order type.
  
   - The result depends highly on the constants h and r chosen for the cost
     function. Maybe some kind of control loop can be implemented to drive
     this values, to achieve some end result. Although this would require
     some kind of 'error' which means establishing formally what our goal
     point set is.
  
   - On point sets with 16 bit coordinates (n>8) the way of handling the
     boundary centered on (128,128) with radius 128 makes all costs and
     forces go to infinity.
  
  Neutral characteristics:
   - It seems to be independent from the starting position.
   - Running time is O(n^3) per iteration because we iterate all O(n^2)
     segments and for each one, compute n vectors, one for each point.
    
  The code used for testing this idea can be found in:

    commit b25b6bab8a769adfe198bf537ae59e6d2614c019
    Author: Santiago León <santileortiz@gmail.com>
    Date:   Tue Jan 9 11:22:42 2018 -0600

        Preliminary implementation of auto positioning of points



  IDEA #2:
  The main change here is to use angles instead of distances to
  compute the force vectors. The objective is to keep each point contained
  between a pair of segments.
  
  First we compute for each point v an array S that lists the clockwise order
  of each other point around v (using n*(n-1) = O(n^2) space and O(n^2
  log(n)) time). Now in each iteration, we select a point v, and choose 3
  (clockwise) consecutive points around v from the precomputed array, call
  them s_m, p and s_p (we cycle around the end of S). Compute the clockwise
  angle between vectors vs_m and vp, and call it a, do the same for the
  clockwise angle between vp and vs_p, call it b. Compute a unit vector dv
  perpendicular to vp pointing clockwise (right of vp), then multiply it by
  (b-a)/(b+a). This vector dv will be the influence of the segments vs_m
  and vs_p on the point p. By adding all the influences of all pairs of
  segments on each point p we get the resulting force on p. All this takes
  time O(n^2).
  
  The rationale behind the value (b-a)/(b+a) is that we want to scale dv
  by a value in the range [-1,1]. Then if a>b then we push p towards vs_m
  (i.e. away from the smallest angle), and if p is bisecting the angle,
  then the influence of this pair of segments over p is 0. The direction of
  dv is chosen as if v was applying a torque on p.
  
  This proposal has the same problem than IDEA #1 of making the point set
  grow indefinitely. For this we use the same approach as before and
  create a circular boundary around (128,128) to keep everything in place.
  But instead of a cost function we multiply the distance to the boundary
  by a small constant. While testing this I tried the idea of only applying the
  boundary force to the points in the convex hull but this didn't work as they
  would be pushed further to the center than the rest of the points, making
  points inside go out of the convex hull.
  
  These are the results of trying out this idea:
  
  Pros:
   - This method is MUCH better at keeping the same order type all the
     time. Still not perfect, but most of the ones that failed before, now
     work.
   - There is no cost function, so there are no parameters to tweak, other
     than the force of the circular boundary.
   - Point sets with 16 bit coordinates don't get that much crazy now
     (nothing goes to infinity). They just start translating towards
     (128,128).
   - Runs faster than IDEA #1.
   - The maximum magnitude of a force over a point is bounded by the number
     of points.
  
  Cons:
   - The result does not look very symmetric. Even the order type 0 ends up
     crooked.
   - Still some point sets change order type.
   - Sometimes things may appear to start slowing down, and then start
     accelerating again.
  
  Neutral characteristics:
   - The result seems to be dependent on the initial position of the
     points. (Which may be good because allows the user to retry by moving
     points around and running again the algorithm, or bad because the user
     may get confused).

  The code used to test this is found in:

        commit 490e69e652096eb349133b1cd20a81b25489b0d3
        Author: Santiago León <santileortiz@gmail.com>
        Date:   Thu Jan 11 12:56:37 2018 -0600

            Angle based algorithm for point positioning

  IDEA #3:
  Turns out some of the cons of IDEA #2 were actually implementation bugs, and
  some easy changes could be implmemented to make the situation better for
  point sets with 16 bit coordinates.

  This is exactly the same as before, but now the code does not produce crooked
  point sets when it's obviously possible (like the convex set). This was caused
  by problems in the comparison function of the angle sorting algorithm added to
  the fact that we were not adding correctly the force vector on res[0].

  As an improvement we changed the boundary to be centered around the centroid
  of the convex hull and the radius equal to the distance form the centroid to
  p0. (Setting the radius fixed to 128 was tried but the behavior of the point
  set suddenly shrinking for point sets with 16 bit coordinates wasn't nice.

  Also, I tested several values for a scaling factor of the force, and the
  change indicator. The purpose of it was to try to have the duration of the
  simulation be similar, as well as the speed at which points move. The last
  one proved to be quite important in making sure the point set does not enter
  an oscillatory state There's definiteley more work to be done regarding this
  parameter and why it cause such erratic behaviors sometimes. The chosen ones
  seem to work well enough at least for all randomly sampled point sets, but we
  have no guarantees about this.

  Pros:
   - The order type does not seem to change, at least for tested point sets.
   - Resulting point sets look nice and symmetric (if there is symmetry).
   - There are no input parameters required.
   - Works well enough for point sets up to n=10.
   - Equal running time than IDEA #2.
  
  Cons:
   - There is not a lot of control on the size or position of the resulting
     point set. To actually center and scale the point set the circular force
     field must be tweaked at compile time.
   - We have two hardcoded values whose nature is still not well understood.
     One is a scale factor of the angular force, and the other one is a scale
     factor of the change indicator. Currently we use constants like the number
     of points, radius of the circular force field to guess values that work
     for now. The rationale of choosing them was that we want stable and quick
     movement of the points.

  Code:

        commit 12c32608b4db5dbb60746d97856835ee511a366f
        Author: Santiago León <santileortiz@gmail.com>
        Date:   Sat Jan 13 20:56:04 2018 -0600

            Improved angular force point auto positioning

  IDEA #4:
  The next improvement attempt was to get more control over the final position
  of the points. To do this I tried several things, most of which were
  unsuccesful, and whose code I won't clean up into a workable commit but can
  be somewhat found commented in previous commits.

  I tried to create a regular polygon and pull each corresponding point in the
  convex hull towards it. The polygon could be created in several ways, but the
  general idea was for it to not be very far away from the current position of
  the points. For all attempts it was centered around the centroid, with the
  following diferences:
      - Given radius, and the direction of the first edge (always p0-->p1).
      - First edge (always p0-->p1), and the radius was computed to make this
        an edge.
      - Direction towards p0 and given radius.
      - The actual radius vector of the desired polygon.

  There were no significant differences between all the variations of this kind
  of anchoring, but we experienced several problems because we were adding a
  new force to points in the convex hull but not to points in the interior.
  Sometimes the convex hull would rush to it's position and leave behind
  (outside of the hull) points that should be in the interior.

  To balance this we tried slowing down the points in the convex hull. The
  problem was this made the algorithm highly dependent on the scale of this
  force vs the scale of the angular force. This mean more parameters, and it
  seemed dificult to find a nice relationship between them. Other idea was to
  normalize the angular force field to the maximum value, and then normalize
  the convex hull force too, then add both fields together by some kind of
  factor that chooses which one has more influence. Still, this implied yet
  another factor to control, and seemed to affect a lot the convergence of the
  algorithm.

  Another idea was to add some similar force to points in the interior of the
  convex hull. We could emit a force from the convex hull but I think this
  would either be computationally expensive or require advanced data structures
  because we need to compute the closest segment to a point inside the polygon,
  for every point. Instead a simpler approach was to add a circular force field
  centered in the centroid that pulled interior points towards it, this seemed
  to work well enough.

  Still after all this testing most attempts felt hacky because we were adding
  together 3 different kinds of forces and the interaction between all these
  force fields could really be unexpected. At least until a proper mathematical
  analysis is made. And on top of this results were not THAT impressive, points
  in the convex hull most of the times stopped before reaching their position, they
  were quite far from reaching the desired radius of the point set, and some
  points had to travel a lot, and moved worringly quickly, in a way that made
  me think it was just a matter of time befor I found a point set that crashed
  all the system.

  Finally I decided to test a rigid circular 'wall' instead of a force field,
  or forces that pulled specific points. For this we imagine a circle around
  the centroid of radius equal to the distance from the centroid to p0.
  Whanever a point's position is outside of the wall, we add a force towards
  the centroid equal to the projection of it's angular force over the radius.
  This effectively cancells out the force component that was pulling it
  outside, and then we add a small force proportional to the distance to the
  wall which slowly brings it towards it. For the way the angular force is
  defined I think it's possible to show that the only points that can ever
  colide with the wall are the ones in the convex hull (although I have not yet
  done such proof).

  This final option seemed to be the best one in terms of simplicity and
  controlled behavior of the end results. Which is the reason why it's the
  one I left for now.

  Pros:
   - The order type does not change.
   - Resulting point set is symmetric whan possible.
   - The radius and position of the resulting point set is very close to the
     targeted one.

  Cons:
   - We have some ugly hardcoded values that worry me. Although, choosen values
     seem to work fine for now.
   - Slow convergence as the value of n increases Which means I'm still not
     satisfied by the scaling chossen for the change indicator.
   - While tweaking the scaling of the angular force it seemed very brittle, and
     made points oscillate and then go crazy.
   - Some points en up REALLY close to it's cell bounds, making it harder to
     visualize (which was the whole point of trying this).
   - Sometimes points start geting VERY close together. I think there is a case
     where they get so close, that the point set goes haywire.

  Code:

        commit 8d82d9e2e1d2995a89835da8f80dc2d012752dad
        Author: Santiago León <santileortiz@gmail.com>
        Date:   Sat Jan 13 21:53:23 2018 -0600

            Simpler version of auto positioning algorithm

  FUTURE IDEAS:
    These are some new things to try out that have occured to me:

      - Use a linear cost with the distance force as described in IDEA #1 but
        project the vector as a ray perpendicular to the segment, going through
        the point and intersecting the next line L induced by it's pair segment
        through a point v as in IDEA #2. Then set the r value to the distance
        from the point to L.  This has the advantage that the cost will be 0 in
        the boudary in the case the point was about to go out, but maybe has
        the drawback of making everything highly dependent on the initial
        position.

      - The previous idea can also be explored by changing L by the opposite
        boundary of the cell where the point is located.

      - What happens if instead of adding angular forces to the middle point we
        add them to the points forming the cone? I toyed with this but so far
        it does not look promising. Points seem to want to go to the center
        instead of outside.

      - If we finally get to a simple enough model, maybe we could properly
        study the system and try to apply proper optimization methods.


Change indicator computation:
-----------------------------

  IDEA #1:
  Average of the magnitudes of the resulting n force vectors of
  each point.
  
    Cons:
     - The point set won't converge to a static one. Sometimes forces'
       norm becomes static in a non 0 value while the points are rotating
       rigidly around some point.
  
  
  IDEA #2:
  Average of the change in distance form p0 to each other point.
  
    Cons:
     - If only one point is still changing the the change in distance for
       this point will be divided by n, making the indicator smaller than
       the actual change in the point set.
  
  IDEA #3:
  Maximum change in distance from p0 to each other point.
  
    Pros:
     - So far there are no issues with this indicator.
  

